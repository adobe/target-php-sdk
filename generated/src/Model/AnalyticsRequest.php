<?php
/**
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/**
 * AnalyticsRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\Target\Delivery\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Target Delivery API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adobe\Target\Delivery\v1\Model;

use \ArrayAccess;
use \Adobe\Target\Delivery\v1\ObjectSerializer;

/**
 * AnalyticsRequest Class Doc Comment
 *
 * @category Class
 * @description Integration with Adobe Analytics (A4T)
 * @package  Adobe\Target\Delivery\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalyticsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnalyticsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'supplementalDataId' => 'string',
        'logging' => '\Adobe\Target\Delivery\v1\Model\LoggingType',
        'trackingServer' => 'string',
        'trackingServerSecure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'supplementalDataId' => null,
        'logging' => null,
        'trackingServer' => null,
        'trackingServerSecure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplementalDataId' => 'supplementalDataId',
        'logging' => 'logging',
        'trackingServer' => 'trackingServer',
        'trackingServerSecure' => 'trackingServerSecure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplementalDataId' => 'setSupplementalDataId',
        'logging' => 'setLogging',
        'trackingServer' => 'setTrackingServer',
        'trackingServerSecure' => 'setTrackingServerSecure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplementalDataId' => 'getSupplementalDataId',
        'logging' => 'getLogging',
        'trackingServer' => 'getTrackingServer',
        'trackingServerSecure' => 'getTrackingServerSecure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['supplementalDataId'] = isset($data['supplementalDataId']) ? $data['supplementalDataId'] : null;
        $this->container['logging'] = isset($data['logging']) ? $data['logging'] : null;
        $this->container['trackingServer'] = isset($data['trackingServer']) ? $data['trackingServer'] : null;
        $this->container['trackingServerSecure'] = isset($data['trackingServerSecure']) ? $data['trackingServerSecure'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['supplementalDataId']) && (mb_strlen($this->container['supplementalDataId']) > 33)) {
            $invalidProperties[] = "invalid value for 'supplementalDataId', the character length must be smaller than or equal to 33.";
        }

        if (!is_null($this->container['supplementalDataId']) && (mb_strlen($this->container['supplementalDataId']) < 33)) {
            $invalidProperties[] = "invalid value for 'supplementalDataId', the character length must be bigger than or equal to 33.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplementalDataId
     *
     * @return string|null
     */
    public function getSupplementalDataId()
    {
        return $this->container['supplementalDataId'];
    }

    /**
     * Sets supplementalDataId
     *
     * @param string|null $supplementalDataId Supplemental data id, used for **server side** integrations. Format <16 hexadecimal digits>-<16 hexadecimal digits>
     *
     * @return $this
     */
    public function setSupplementalDataId($supplementalDataId)
    {
        if (!is_null($supplementalDataId) && (mb_strlen($supplementalDataId) > 33)) {
            throw new \InvalidArgumentException('invalid length for $supplementalDataId when calling AnalyticsRequest., must be smaller than or equal to 33.');
        }
        if (!is_null($supplementalDataId) && (mb_strlen($supplementalDataId) < 33)) {
            throw new \InvalidArgumentException('invalid length for $supplementalDataId when calling AnalyticsRequest., must be bigger than or equal to 33.');
        }

        $this->container['supplementalDataId'] = $supplementalDataId;

        return $this;
    }

    /**
     * Gets logging
     *
     * @return \Adobe\Target\Delivery\v1\Model\LoggingType|null
     */
    public function getLogging()
    {
        return $this->container['logging'];
    }

    /**
     * Sets logging
     *
     * @param \Adobe\Target\Delivery\v1\Model\LoggingType|null $logging logging
     *
     * @return $this
     */
    public function setLogging($logging)
    {
        $this->container['logging'] = $logging;

        return $this;
    }

    /**
     * Gets trackingServer
     *
     * @return string|null
     */
    public function getTrackingServer()
    {
        return $this->container['trackingServer'];
    }

    /**
     * Sets trackingServer
     *
     * @param string|null $trackingServer tracking server
     *
     * @return $this
     */
    public function setTrackingServer($trackingServer)
    {
        $this->container['trackingServer'] = $trackingServer;

        return $this;
    }

    /**
     * Gets trackingServerSecure
     *
     * @return string|null
     */
    public function getTrackingServerSecure()
    {
        return $this->container['trackingServerSecure'];
    }

    /**
     * Sets trackingServerSecure
     *
     * @param string|null $trackingServerSecure secure tracking server
     *
     * @return $this
     */
    public function setTrackingServerSecure($trackingServerSecure)
    {
        $this->container['trackingServerSecure'] = $trackingServerSecure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
