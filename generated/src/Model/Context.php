<?php
/**
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/**
 * Context
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\Target\Delivery\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Target Delivery API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adobe\Target\Delivery\v1\Model;

use \ArrayAccess;
use \Adobe\Target\Delivery\v1\ObjectSerializer;

/**
 * Context Class Doc Comment
 *
 * @category Class
 * @description Specifies the context for the request, IE if it a web request then is should include user agent etc.
 * @package  Adobe\Target\Delivery\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Context implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Context';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel' => '\Adobe\Target\Delivery\v1\Model\ChannelType',
        'mobilePlatform' => '\Adobe\Target\Delivery\v1\Model\MobilePlatform',
        'application' => '\Adobe\Target\Delivery\v1\Model\Application',
        'screen' => '\Adobe\Target\Delivery\v1\Model\Screen',
        'window' => '\Adobe\Target\Delivery\v1\Model\Window',
        'browser' => '\Adobe\Target\Delivery\v1\Model\Browser',
        'address' => '\Adobe\Target\Delivery\v1\Model\Address',
        'geo' => '\Adobe\Target\Delivery\v1\Model\Geo',
        'timeOffsetInMinutes' => 'double',
        'userAgent' => 'string',
        'beacon' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'channel' => null,
        'mobilePlatform' => null,
        'application' => null,
        'screen' => null,
        'window' => null,
        'browser' => null,
        'address' => null,
        'geo' => null,
        'timeOffsetInMinutes' => 'double',
        'userAgent' => null,
        'beacon' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'mobilePlatform' => 'mobilePlatform',
        'application' => 'application',
        'screen' => 'screen',
        'window' => 'window',
        'browser' => 'browser',
        'address' => 'address',
        'geo' => 'geo',
        'timeOffsetInMinutes' => 'timeOffsetInMinutes',
        'userAgent' => 'userAgent',
        'beacon' => 'beacon'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'mobilePlatform' => 'setMobilePlatform',
        'application' => 'setApplication',
        'screen' => 'setScreen',
        'window' => 'setWindow',
        'browser' => 'setBrowser',
        'address' => 'setAddress',
        'geo' => 'setGeo',
        'timeOffsetInMinutes' => 'setTimeOffsetInMinutes',
        'userAgent' => 'setUserAgent',
        'beacon' => 'setBeacon'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'mobilePlatform' => 'getMobilePlatform',
        'application' => 'getApplication',
        'screen' => 'getScreen',
        'window' => 'getWindow',
        'browser' => 'getBrowser',
        'address' => 'getAddress',
        'geo' => 'getGeo',
        'timeOffsetInMinutes' => 'getTimeOffsetInMinutes',
        'userAgent' => 'getUserAgent',
        'beacon' => 'getBeacon'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['mobilePlatform'] = isset($data['mobilePlatform']) ? $data['mobilePlatform'] : null;
        $this->container['application'] = isset($data['application']) ? $data['application'] : null;
        $this->container['screen'] = isset($data['screen']) ? $data['screen'] : null;
        $this->container['window'] = isset($data['window']) ? $data['window'] : null;
        $this->container['browser'] = isset($data['browser']) ? $data['browser'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['geo'] = isset($data['geo']) ? $data['geo'] : null;
        $this->container['timeOffsetInMinutes'] = isset($data['timeOffsetInMinutes']) ? $data['timeOffsetInMinutes'] : null;
        $this->container['userAgent'] = isset($data['userAgent']) ? $data['userAgent'] : null;
        $this->container['beacon'] = isset($data['beacon']) ? $data['beacon'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return \Adobe\Target\Delivery\v1\Model\ChannelType
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Adobe\Target\Delivery\v1\Model\ChannelType $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets mobilePlatform
     *
     * @return \Adobe\Target\Delivery\v1\Model\MobilePlatform|null
     */
    public function getMobilePlatform()
    {
        return $this->container['mobilePlatform'];
    }

    /**
     * Sets mobilePlatform
     *
     * @param \Adobe\Target\Delivery\v1\Model\MobilePlatform|null $mobilePlatform mobilePlatform
     *
     * @return $this
     */
    public function setMobilePlatform($mobilePlatform)
    {
        $this->container['mobilePlatform'] = $mobilePlatform;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \Adobe\Target\Delivery\v1\Model\Application|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \Adobe\Target\Delivery\v1\Model\Application|null $application application
     *
     * @return $this
     */
    public function setApplication($application)
    {
        $this->container['application'] = $application;

        return $this;
    }

    /**
     * Gets screen
     *
     * @return \Adobe\Target\Delivery\v1\Model\Screen|null
     */
    public function getScreen()
    {
        return $this->container['screen'];
    }

    /**
     * Sets screen
     *
     * @param \Adobe\Target\Delivery\v1\Model\Screen|null $screen screen
     *
     * @return $this
     */
    public function setScreen($screen)
    {
        $this->container['screen'] = $screen;

        return $this;
    }

    /**
     * Gets window
     *
     * @return \Adobe\Target\Delivery\v1\Model\Window|null
     */
    public function getWindow()
    {
        return $this->container['window'];
    }

    /**
     * Sets window
     *
     * @param \Adobe\Target\Delivery\v1\Model\Window|null $window window
     *
     * @return $this
     */
    public function setWindow($window)
    {
        $this->container['window'] = $window;

        return $this;
    }

    /**
     * Gets browser
     *
     * @return \Adobe\Target\Delivery\v1\Model\Browser|null
     */
    public function getBrowser()
    {
        return $this->container['browser'];
    }

    /**
     * Sets browser
     *
     * @param \Adobe\Target\Delivery\v1\Model\Browser|null $browser browser
     *
     * @return $this
     */
    public function setBrowser($browser)
    {
        $this->container['browser'] = $browser;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Adobe\Target\Delivery\v1\Model\Address|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Adobe\Target\Delivery\v1\Model\Address|null $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return \Adobe\Target\Delivery\v1\Model\Geo|null
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param \Adobe\Target\Delivery\v1\Model\Geo|null $geo geo
     *
     * @return $this
     */
    public function setGeo($geo)
    {
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets timeOffsetInMinutes
     *
     * @return double|null
     */
    public function getTimeOffsetInMinutes()
    {
        return $this->container['timeOffsetInMinutes'];
    }

    /**
     * Sets timeOffsetInMinutes
     *
     * @param double|null $timeOffsetInMinutes Specifies minutes from UTC for specific client
     *
     * @return $this
     */
    public function setTimeOffsetInMinutes($timeOffsetInMinutes)
    {
        $this->container['timeOffsetInMinutes'] = $timeOffsetInMinutes;

        return $this;
    }

    /**
     * Gets userAgent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['userAgent'];
    }

    /**
     * Sets userAgent
     *
     * @param string|null $userAgent User-Agent should be sent only via this property. HTTP header User-Agent is ignored.
     *
     * @return $this
     */
    public function setUserAgent($userAgent)
    {
        $this->container['userAgent'] = $userAgent;

        return $this;
    }

    /**
     * Gets beacon
     *
     * @return bool|null
     */
    public function getBeacon()
    {
        return $this->container['beacon'];
    }

    /**
     * Sets beacon
     *
     * @param bool|null $beacon In case beacon = true is provided in the request, the server will return a 204 No Content response with no response body.
     *
     * @return $this
     */
    public function setBeacon($beacon)
    {
        $this->container['beacon'] = $beacon;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
