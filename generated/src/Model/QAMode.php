<?php
/**
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/**
 * QAMode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\Target\Delivery\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Target Delivery API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adobe\Target\Delivery\v1\Model;

use \ArrayAccess;
use \Adobe\Target\Delivery\v1\ObjectSerializer;

/**
 * QAMode Class Doc Comment
 *
 * @category Class
 * @description Use this object to enable the QA mode in the request. Use the QA mode to test the look and feel of your site or application for various activities in isolation or together, with the possibilty to match or not match specified audiences, select a specific experience, count the impressions/visits for the reporting or not.
 * @package  Adobe\Target\Delivery\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class QAMode implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QAMode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token' => 'string',
        'listedActivitiesOnly' => 'bool',
        'evaluateAsTrueAudienceIds' => 'int[]',
        'evaluateAsFalseAudienceIds' => 'int[]',
        'previewIndexes' => '\Adobe\Target\Delivery\v1\Model\QAModePreviewIndex[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'token' => null,
        'listedActivitiesOnly' => null,
        'evaluateAsTrueAudienceIds' => 'int64',
        'evaluateAsFalseAudienceIds' => 'int64',
        'previewIndexes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'listedActivitiesOnly' => 'listedActivitiesOnly',
        'evaluateAsTrueAudienceIds' => 'evaluateAsTrueAudienceIds',
        'evaluateAsFalseAudienceIds' => 'evaluateAsFalseAudienceIds',
        'previewIndexes' => 'previewIndexes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'listedActivitiesOnly' => 'setListedActivitiesOnly',
        'evaluateAsTrueAudienceIds' => 'setEvaluateAsTrueAudienceIds',
        'evaluateAsFalseAudienceIds' => 'setEvaluateAsFalseAudienceIds',
        'previewIndexes' => 'setPreviewIndexes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'listedActivitiesOnly' => 'getListedActivitiesOnly',
        'evaluateAsTrueAudienceIds' => 'getEvaluateAsTrueAudienceIds',
        'evaluateAsFalseAudienceIds' => 'getEvaluateAsFalseAudienceIds',
        'previewIndexes' => 'getPreviewIndexes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['listedActivitiesOnly'] = isset($data['listedActivitiesOnly']) ? $data['listedActivitiesOnly'] : null;
        $this->container['evaluateAsTrueAudienceIds'] = isset($data['evaluateAsTrueAudienceIds']) ? $data['evaluateAsTrueAudienceIds'] : null;
        $this->container['evaluateAsFalseAudienceIds'] = isset($data['evaluateAsFalseAudienceIds']) ? $data['evaluateAsFalseAudienceIds'] : null;
        $this->container['previewIndexes'] = isset($data['previewIndexes']) ? $data['previewIndexes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token The encrypted token for the QA mode. It contains the list of the activity ids that are allowed to be executed in QA mode. Validation   * After decryption, the client code from the token should match the one from the request.   * After decryption, activities with the ids specified in the token should belong to the client.
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets listedActivitiesOnly
     *
     * @return bool|null
     */
    public function getListedActivitiesOnly()
    {
        return $this->container['listedActivitiesOnly'];
    }

    /**
     * Sets listedActivitiesOnly
     *
     * @param bool|null $listedActivitiesOnly Specifies whether qa_mode campaigns should be executed in isolation or if they should be evaluated along other active campaigns for current environment.
     *
     * @return $this
     */
    public function setListedActivitiesOnly($listedActivitiesOnly)
    {
        $this->container['listedActivitiesOnly'] = $listedActivitiesOnly;

        return $this;
    }

    /**
     * Gets evaluateAsTrueAudienceIds
     *
     * @return int[]|null
     */
    public function getEvaluateAsTrueAudienceIds()
    {
        return $this->container['evaluateAsTrueAudienceIds'];
    }

    /**
     * Sets evaluateAsTrueAudienceIds
     *
     * @param int[]|null $evaluateAsTrueAudienceIds List of audience ids that should be always evaluated as TRUE in the scope of the delivery request
     *
     * @return $this
     */
    public function setEvaluateAsTrueAudienceIds($evaluateAsTrueAudienceIds)
    {
        $this->container['evaluateAsTrueAudienceIds'] = $evaluateAsTrueAudienceIds;

        return $this;
    }

    /**
     * Gets evaluateAsFalseAudienceIds
     *
     * @return int[]|null
     */
    public function getEvaluateAsFalseAudienceIds()
    {
        return $this->container['evaluateAsFalseAudienceIds'];
    }

    /**
     * Sets evaluateAsFalseAudienceIds
     *
     * @param int[]|null $evaluateAsFalseAudienceIds List of audience ids that should be always evaluated as FALSE in the scope of the delivery request
     *
     * @return $this
     */
    public function setEvaluateAsFalseAudienceIds($evaluateAsFalseAudienceIds)
    {
        $this->container['evaluateAsFalseAudienceIds'] = $evaluateAsFalseAudienceIds;

        return $this;
    }

    /**
     * Gets previewIndexes
     *
     * @return \Adobe\Target\Delivery\v1\Model\QAModePreviewIndex[]|null
     */
    public function getPreviewIndexes()
    {
        return $this->container['previewIndexes'];
    }

    /**
     * Sets previewIndexes
     *
     * @param \Adobe\Target\Delivery\v1\Model\QAModePreviewIndex[]|null $previewIndexes List of preview indexes. If present, the list cannot be empty.
     *
     * @return $this
     */
    public function setPreviewIndexes($previewIndexes)
    {
        $this->container['previewIndexes'] = $previewIndexes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
