<?php
/**
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

/**
 * DeliveryRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adobe\Target\Delivery\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Target Delivery API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adobe\Target\Delivery\v1\Model;

use \ArrayAccess;
use \Adobe\Target\Delivery\v1\ObjectSerializer;

/**
 * DeliveryRequest Class Doc Comment
 *
 * @category Class
 * @package  Adobe\Target\Delivery\v1
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeliveryRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeliveryRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'requestId' => 'string',
        'impressionId' => 'string',
        'id' => '\Adobe\Target\Delivery\v1\Model\VisitorId',
        'environmentId' => 'int',
        'property' => '\Adobe\Target\Delivery\v1\Model\Property',
        'trace' => '\Adobe\Target\Delivery\v1\Model\Trace',
        'context' => '\Adobe\Target\Delivery\v1\Model\Context',
        'experienceCloud' => '\Adobe\Target\Delivery\v1\Model\ExperienceCloud',
        'execute' => '\Adobe\Target\Delivery\v1\Model\ExecuteRequest',
        'prefetch' => '\Adobe\Target\Delivery\v1\Model\PrefetchRequest',
        'telemetry' => '\Adobe\Target\Delivery\v1\Model\Telemetry',
        'notifications' => '\Adobe\Target\Delivery\v1\Model\Notification[]',
        'qaMode' => '\Adobe\Target\Delivery\v1\Model\QAMode'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'requestId' => null,
        'impressionId' => null,
        'id' => null,
        'environmentId' => 'int64',
        'property' => null,
        'trace' => null,
        'context' => null,
        'experienceCloud' => null,
        'execute' => null,
        'prefetch' => null,
        'telemetry' => null,
        'notifications' => null,
        'qaMode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'requestId' => 'requestId',
        'impressionId' => 'impressionId',
        'id' => 'id',
        'environmentId' => 'environmentId',
        'property' => 'property',
        'trace' => 'trace',
        'context' => 'context',
        'experienceCloud' => 'experienceCloud',
        'execute' => 'execute',
        'prefetch' => 'prefetch',
        'telemetry' => 'telemetry',
        'notifications' => 'notifications',
        'qaMode' => 'qaMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'requestId' => 'setRequestId',
        'impressionId' => 'setImpressionId',
        'id' => 'setId',
        'environmentId' => 'setEnvironmentId',
        'property' => 'setProperty',
        'trace' => 'setTrace',
        'context' => 'setContext',
        'experienceCloud' => 'setExperienceCloud',
        'execute' => 'setExecute',
        'prefetch' => 'setPrefetch',
        'telemetry' => 'setTelemetry',
        'notifications' => 'setNotifications',
        'qaMode' => 'setQaMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'requestId' => 'getRequestId',
        'impressionId' => 'getImpressionId',
        'id' => 'getId',
        'environmentId' => 'getEnvironmentId',
        'property' => 'getProperty',
        'trace' => 'getTrace',
        'context' => 'getContext',
        'experienceCloud' => 'getExperienceCloud',
        'execute' => 'getExecute',
        'prefetch' => 'getPrefetch',
        'telemetry' => 'getTelemetry',
        'notifications' => 'getNotifications',
        'qaMode' => 'getQaMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['requestId'] = isset($data['requestId']) ? $data['requestId'] : null;
        $this->container['impressionId'] = isset($data['impressionId']) ? $data['impressionId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['environmentId'] = isset($data['environmentId']) ? $data['environmentId'] : null;
        $this->container['property'] = isset($data['property']) ? $data['property'] : null;
        $this->container['trace'] = isset($data['trace']) ? $data['trace'] : null;
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['experienceCloud'] = isset($data['experienceCloud']) ? $data['experienceCloud'] : null;
        $this->container['execute'] = isset($data['execute']) ? $data['execute'] : null;
        $this->container['prefetch'] = isset($data['prefetch']) ? $data['prefetch'] : null;
        $this->container['telemetry'] = isset($data['telemetry']) ? $data['telemetry'] : null;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
        $this->container['qaMode'] = isset($data['qaMode']) ? $data['qaMode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['requestId']) && (mb_strlen($this->container['requestId']) > 128)) {
            $invalidProperties[] = "invalid value for 'requestId', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['impressionId']) && (mb_strlen($this->container['impressionId']) > 128)) {
            $invalidProperties[] = "invalid value for 'impressionId', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['context'] === null) {
            $invalidProperties[] = "'context' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets requestId
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['requestId'];
    }

    /**
     * Sets requestId
     *
     * @param string|null $requestId The request ID that will be returned in the response. In case it is not provided, an UUID is generated and returned automatically.
     *
     * @return $this
     */
    public function setRequestId($requestId)
    {
        if (!is_null($requestId) && (mb_strlen($requestId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $requestId when calling DeliveryRequest., must be smaller than or equal to 128.');
        }

        $this->container['requestId'] = $requestId;

        return $this;
    }

    /**
     * Gets impressionId
     *
     * @return string|null
     */
    public function getImpressionId()
    {
        return $this->container['impressionId'];
    }

    /**
     * Sets impressionId
     *
     * @param string|null $impressionId If not present it will be automatically generated (UUID). If present,  second and subsequent requests with the same id will not increment impressions to activities/metrics. Similar to page id.
     *
     * @return $this
     */
    public function setImpressionId($impressionId)
    {
        if (!is_null($impressionId) && (mb_strlen($impressionId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $impressionId when calling DeliveryRequest., must be smaller than or equal to 128.');
        }

        $this->container['impressionId'] = $impressionId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \Adobe\Target\Delivery\v1\Model\VisitorId|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Adobe\Target\Delivery\v1\Model\VisitorId|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets environmentId
     *
     * @return int|null
     */
    public function getEnvironmentId()
    {
        return $this->container['environmentId'];
    }

    /**
     * Sets environmentId
     *
     * @param int|null $environmentId Valid client environment id. If not specified host will be determined base on the provided host.
     *
     * @return $this
     */
    public function setEnvironmentId($environmentId)
    {
        $this->container['environmentId'] = $environmentId;

        return $this;
    }

    /**
     * Gets property
     *
     * @return \Adobe\Target\Delivery\v1\Model\Property|null
     */
    public function getProperty()
    {
        return $this->container['property'];
    }

    /**
     * Sets property
     *
     * @param \Adobe\Target\Delivery\v1\Model\Property|null $property property
     *
     * @return $this
     */
    public function setProperty($property)
    {
        $this->container['property'] = $property;

        return $this;
    }

    /**
     * Gets trace
     *
     * @return \Adobe\Target\Delivery\v1\Model\Trace|null
     */
    public function getTrace()
    {
        return $this->container['trace'];
    }

    /**
     * Sets trace
     *
     * @param \Adobe\Target\Delivery\v1\Model\Trace|null $trace trace
     *
     * @return $this
     */
    public function setTrace($trace)
    {
        $this->container['trace'] = $trace;

        return $this;
    }

    /**
     * Gets context
     *
     * @return \Adobe\Target\Delivery\v1\Model\Context
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param \Adobe\Target\Delivery\v1\Model\Context $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets experienceCloud
     *
     * @return \Adobe\Target\Delivery\v1\Model\ExperienceCloud|null
     */
    public function getExperienceCloud()
    {
        return $this->container['experienceCloud'];
    }

    /**
     * Sets experienceCloud
     *
     * @param \Adobe\Target\Delivery\v1\Model\ExperienceCloud|null $experienceCloud experienceCloud
     *
     * @return $this
     */
    public function setExperienceCloud($experienceCloud)
    {
        $this->container['experienceCloud'] = $experienceCloud;

        return $this;
    }

    /**
     * Gets execute
     *
     * @return \Adobe\Target\Delivery\v1\Model\ExecuteRequest|null
     */
    public function getExecute()
    {
        return $this->container['execute'];
    }

    /**
     * Sets execute
     *
     * @param \Adobe\Target\Delivery\v1\Model\ExecuteRequest|null $execute execute
     *
     * @return $this
     */
    public function setExecute($execute)
    {
        $this->container['execute'] = $execute;

        return $this;
    }

    /**
     * Gets prefetch
     *
     * @return \Adobe\Target\Delivery\v1\Model\PrefetchRequest|null
     */
    public function getPrefetch()
    {
        return $this->container['prefetch'];
    }

    /**
     * Sets prefetch
     *
     * @param \Adobe\Target\Delivery\v1\Model\PrefetchRequest|null $prefetch prefetch
     *
     * @return $this
     */
    public function setPrefetch($prefetch)
    {
        $this->container['prefetch'] = $prefetch;

        return $this;
    }

    /**
     * Gets telemetry
     *
     * @return \Adobe\Target\Delivery\v1\Model\Telemetry|null
     */
    public function getTelemetry()
    {
        return $this->container['telemetry'];
    }

    /**
     * Sets telemetry
     *
     * @param \Adobe\Target\Delivery\v1\Model\Telemetry|null $telemetry telemetry
     *
     * @return $this
     */
    public function setTelemetry($telemetry)
    {
        $this->container['telemetry'] = $telemetry;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \Adobe\Target\Delivery\v1\Model\Notification[]|null
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \Adobe\Target\Delivery\v1\Model\Notification[]|null $notifications Notifications for the displayed content, clicked selectors, and/or visited views or mboxes.
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets qaMode
     *
     * @return \Adobe\Target\Delivery\v1\Model\QAMode|null
     */
    public function getQaMode()
    {
        return $this->container['qaMode'];
    }

    /**
     * Sets qaMode
     *
     * @param \Adobe\Target\Delivery\v1\Model\QAMode|null $qaMode qaMode
     *
     * @return $this
     */
    public function setQaMode($qaMode)
    {
        $this->container['qaMode'] = $qaMode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}
